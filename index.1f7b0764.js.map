{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    start() {\n        if (this.status === \"idle\") {\n            this.status = \"playing\";\n            this.addRandomTile();\n            this.addRandomTile();\n            this.render();\n            const button = document.querySelector(\".button\");\n            if (button) button.textContent = \"Restart\";\n        }\n    }\n    restart() {\n        this.hideMessage();\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        const scoreElement = document.querySelector(\".game-score\");\n        if (scoreElement) scoreElement.textContent = this.score;\n        this.render();\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let totalPoints = 0;\n        let boardChanged = false;\n        // Этап 1: Сдвиг плиток\n        for(let r = 0; r < 4; r++){\n            const { newRow: newRow, points: points, changed: changed } = this.slideAndMerge(this.board[r]);\n            if (changed) {\n                this.board[r] = newRow;\n                totalPoints += points;\n                boardChanged = true;\n            }\n        }\n        // Если произошли изменения (сдвиг или объединение), добавляем новую плитку\n        if (boardChanged) {\n            this.addRandomTile();\n            this.render();\n            this.updateScore(totalPoints);\n            this.checkGameOver();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let totalPoints = 0;\n        let boardChanged = false;\n        // Этап 1: Сдвиг плиток\n        for(let r = 0; r < 4; r++){\n            const reversedRow = [\n                ...this.board[r]\n            ].reverse();\n            const { newRow: newRow, points: points, changed: changed } = this.slideAndMerge(reversedRow);\n            if (changed) {\n                this.board[r] = newRow.reverse();\n                totalPoints += points;\n                boardChanged = true;\n            }\n        }\n        // Если произошли изменения (сдвиг или объединение), добавляем новую плитку\n        if (boardChanged) {\n            this.addRandomTile();\n            this.render();\n            this.updateScore(totalPoints);\n            this.checkGameOver();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let totalPoints = 0;\n        let boardChanged = false;\n        // Этап 1: Сдвиг плиток\n        for(let col = 0; col < 4; col++){\n            const column = [];\n            // Собираем все плитки в колонке, исключая нули\n            for(let row = 0; row < 4; row++)column.push(this.board[row][col]);\n            // Применяем метод slideAndMerge для этой колонки\n            const { newRow: newRow, points: points, changed: changed } = this.slideAndMerge(column);\n            // Если произошло изменение (сдвиг или объединение), обновляем колонку\n            if (changed) {\n                totalPoints += points;\n                boardChanged = true;\n                for(let row = 0; row < 4; row++)this.board[row][col] = newRow[row];\n            }\n        }\n        // Если произошли изменения, добавляем новую плитку\n        if (boardChanged) {\n            this.addRandomTile();\n            this.render();\n            this.updateScore(totalPoints);\n            this.checkGameOver();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let totalPoints = 0;\n        let boardChanged = false;\n        // Этап 1: Сдвиг плиток\n        for(let col = 0; col < 4; col++){\n            const column = [];\n            // Собираем все плитки в колонке (перевернутый порядок)\n            for(let row = 3; row >= 0; row--)column.push(this.board[row][col]);\n            // Применяем метод slideAndMerge для этой колонки\n            const { newRow: newRow, points: points, changed: changed } = this.slideAndMerge(column);\n            if (changed) {\n                totalPoints += points;\n                boardChanged = true;\n                for(let row = 0; row < 4; row++)this.board[3 - row][col] = newRow[row];\n            }\n        }\n        // Если произошли изменения, добавляем новую плитку\n        if (boardChanged) {\n            this.addRandomTile();\n            this.render();\n            this.updateScore(totalPoints);\n            this.checkGameOver();\n        }\n    }\n    updateScore(points) {\n        this.score += points;\n        const scoreElement = document.querySelector(\".game-score\");\n        if (scoreElement) scoreElement.textContent = this.score;\n    }\n    transposeBoard() {\n        const newBoard = [];\n        for(let col = 0; col < this.board[0].length; col++){\n            const newRow = [];\n            for(let row = 0; row < this.board.length; row++)newRow.push(this.board[row][col]);\n            newBoard.push(newRow);\n        }\n        this.board = newBoard;\n    }\n    addRandomTile() {\n        const emptCells = [];\n        for(let r = 0; r < 4; r++){\n            for(let c = 0; c < 4; c++)if (this.board[r][c] === 0) emptCells.push([\n                r,\n                c\n            ]);\n        }\n        if (emptCells.length === 0) return;\n        const [row, col] = emptCells[Math.floor(Math.random() * emptCells.length)];\n        this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        if (this.board.flat().includes(2048)) {\n            this.status = \"win\";\n            this.showMessage(\"You won!\");\n        }\n        this.checkGameOver();\n    }\n    slideAndMerge(row) {\n        const newRow = row.filter((val)=>val !== 0);\n        let points = 0;\n        let changed = false; // Флаг для отслеживания изменений\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            points += newRow[i];\n            newRow.splice(i + 1, 1);\n            changed = true; // Объединение плиток считается изменением\n        }\n        while(newRow.length < 4)newRow.push(0);\n        if (newRow.join(\"\") !== row.join(\"\")) changed = true;\n        return {\n            newRow: newRow,\n            points: points,\n            changed: changed\n        };\n    }\n    isGameOver() {\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.board[r][c] === 0) return false;\n            if (c < 3 && this.board[r][c] === this.board[r][c + 1] || r < 3 && this.board[r][c] === this.board[r + 1][c]) return false;\n        }\n        return true;\n    }\n    checkGameOver() {\n        if (this.isGameOver() === true) {\n            this.status = \"lose\";\n            this.showMessage(\"Game Over!\");\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    render() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        let index = 0;\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            const cell = cells[index];\n            const value = this.board[r][c];\n            if (cell) {\n                cell.innerHTML = value || \"\";\n                cell.className = `field-cell ${value ? `field-cell--${value}` : \"\"}`;\n                index++;\n            }\n        }\n    }\n    showMessage(message) {\n        const messageElement = document.querySelector(\".game-message\");\n        if (messageElement) {\n            messageElement.textContent = message;\n            messageElement.style.display = \"block\";\n        }\n    }\n    hideMessage() {\n        const messageElement = document.querySelector(\".game-message\");\n        if (messageElement) messageElement.style.display = \"none\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageContainer = document.querySelector(\".message-container\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nfunction $09e991522ca7e64e$var$showMessage(messageType) {\n    $09e991522ca7e64e$var$messageContainer.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    if (messageType === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else if (messageType === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if (messageType === \"start\") $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.status === \"idle\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$showMessage(\"start\");\n        // Изменение класса и текста кнопки\n        $09e991522ca7e64e$var$button.classList.remove(\"start\"); // Удаляем старый класс (если был)\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$messageStart.textContent = 'Press \"Restart\" to start the new Game';\n    } else {\n        const confirmRestart = confirm(\"\\u0425\\u043E\\u0442\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0447\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u0443\\u044E \\u0438\\u0433\\u0440\\u0443?\");\n        if (confirmRestart) {\n            $09e991522ca7e64e$var$game.restart();\n            $09e991522ca7e64e$var$game.start();\n            $09e991522ca7e64e$var$showMessage(\"start\");\n            $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        }\n    }\n});\ndocument.addEventListener(\"keydown\", (ev)=>{\n    if ($09e991522ca7e64e$var$game.status === \"playing\") switch(ev.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n    if ($09e991522ca7e64e$var$game.isGameOver()) $09e991522ca7e64e$var$showMessage(\"lose\");\n    else if ($09e991522ca7e64e$var$game.status === \"win\") $09e991522ca7e64e$var$showMessage(\"win\");\n}); // Write your code here\n\n\n//# sourceMappingURL=index.1f7b0764.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\n\nconst messageContainer = document.querySelector('.message-container');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nfunction showMessage(messageType) {\n  messageContainer.classList.remove('hidden');\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  if (messageType === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (messageType === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (messageType === 'start') {\n    messageStart.classList.remove('hidden');\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (game.status === 'idle') {\n    game.start();\n    showMessage('start');\n\n    // Изменение класса и текста кнопки\n    button.classList.remove('start'); // Удаляем старый класс (если был)\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    messageStart.textContent = 'Press \"Restart\" to start the new Game';\n  } else {\n    const confirmRestart = confirm('Хотите начать новую игру?');\n\n    if (confirmRestart) {\n      game.restart();\n      game.start();\n      showMessage('start');\n      button.textContent = 'Restart';\n    }\n  }\n});\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.status === 'playing') {\n    switch (ev.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (game.isGameOver()) {\n    showMessage('lose');\n  } else if (game.status === 'win') {\n    showMessage('win');\n  }\n});\n\n// Write your code here\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  start() {\n    if (this.status === 'idle') {\n      this.status = 'playing';\n      this.addRandomTile();\n      this.addRandomTile();\n      this.render();\n\n      const button = document.querySelector('.button');\n\n      if (button) {\n        button.textContent = 'Restart';\n      }\n    }\n  }\n\n  restart() {\n    this.hideMessage();\n\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n\n    this.render();\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let totalPoints = 0;\n    let boardChanged = false;\n\n    // Этап 1: Сдвиг плиток\n    for (let r = 0; r < 4; r++) {\n      const { newRow, points, changed } = this.slideAndMerge(this.board[r]);\n\n      if (changed) {\n        this.board[r] = newRow;\n        totalPoints += points;\n        boardChanged = true;\n      }\n    }\n\n    // Если произошли изменения (сдвиг или объединение), добавляем новую плитку\n    if (boardChanged) {\n      this.addRandomTile();\n      this.render();\n      this.updateScore(totalPoints);\n      this.checkGameOver();\n    }\n  }\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let totalPoints = 0;\n    let boardChanged = false;\n\n    // Этап 1: Сдвиг плиток\n    for (let r = 0; r < 4; r++) {\n      const reversedRow = [...this.board[r]].reverse();\n      const { newRow, points, changed } = this.slideAndMerge(reversedRow);\n\n      if (changed) {\n        this.board[r] = newRow.reverse();\n        totalPoints += points;\n        boardChanged = true;\n      }\n    }\n\n    // Если произошли изменения (сдвиг или объединение), добавляем новую плитку\n    if (boardChanged) {\n      this.addRandomTile();\n      this.render();\n      this.updateScore(totalPoints);\n      this.checkGameOver();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let totalPoints = 0;\n    let boardChanged = false;\n\n    // Этап 1: Сдвиг плиток\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      // Собираем все плитки в колонке, исключая нули\n      for (let row = 0; row < 4; row++) {\n        column.push(this.board[row][col]);\n      }\n\n      // Применяем метод slideAndMerge для этой колонки\n      const { newRow, points, changed } = this.slideAndMerge(column);\n\n      // Если произошло изменение (сдвиг или объединение), обновляем колонку\n      if (changed) {\n        totalPoints += points;\n        boardChanged = true;\n\n        for (let row = 0; row < 4; row++) {\n          this.board[row][col] = newRow[row];\n        }\n      }\n    }\n\n    // Если произошли изменения, добавляем новую плитку\n    if (boardChanged) {\n      this.addRandomTile();\n      this.render();\n      this.updateScore(totalPoints);\n      this.checkGameOver();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let totalPoints = 0;\n    let boardChanged = false;\n\n    // Этап 1: Сдвиг плиток\n    for (let col = 0; col < 4; col++) {\n      const column = [];\n\n      // Собираем все плитки в колонке (перевернутый порядок)\n      for (let row = 3; row >= 0; row--) {\n        column.push(this.board[row][col]);\n      }\n\n      // Применяем метод slideAndMerge для этой колонки\n      const { newRow, points, changed } = this.slideAndMerge(column);\n\n      if (changed) {\n        totalPoints += points;\n        boardChanged = true;\n\n        for (let row = 0; row < 4; row++) {\n          this.board[3 - row][col] = newRow[row];\n        }\n      }\n    }\n\n    // Если произошли изменения, добавляем новую плитку\n    if (boardChanged) {\n      this.addRandomTile();\n      this.render();\n      this.updateScore(totalPoints);\n      this.checkGameOver();\n    }\n  }\n\n  updateScore(points) {\n    this.score += points;\n\n    const scoreElement = document.querySelector('.game-score');\n\n    if (scoreElement) {\n      scoreElement.textContent = this.score;\n    }\n  }\n\n  transposeBoard() {\n    const newBoard = [];\n\n    for (let col = 0; col < this.board[0].length; col++) {\n      const newRow = [];\n\n      for (let row = 0; row < this.board.length; row++) {\n        newRow.push(this.board[row][col]);\n      }\n      newBoard.push(newRow);\n    }\n    this.board = newBoard;\n  }\n\n  addRandomTile() {\n    const emptCells = [];\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          emptCells.push([r, c]);\n        }\n      }\n    }\n\n    if (emptCells.length === 0) {\n      return;\n    }\n\n    const [row, col] = emptCells[Math.floor(Math.random() * emptCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n      this.showMessage('You won!');\n    }\n    this.checkGameOver();\n  }\n\n  slideAndMerge(row) {\n    const newRow = row.filter((val) => val !== 0);\n    let points = 0;\n    let changed = false; // Флаг для отслеживания изменений\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        points += newRow[i];\n        newRow.splice(i + 1, 1);\n        changed = true; // Объединение плиток считается изменением\n      }\n    }\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    if (newRow.join('') !== row.join('')) {\n      changed = true;\n    }\n\n    return { newRow, points, changed };\n  }\n\n  isGameOver() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.board[r][c] === 0) {\n          return false;\n        }\n\n        if (\n          (c < 3 && this.board[r][c] === this.board[r][c + 1]) ||\n          (r < 3 && this.board[r][c] === this.board[r + 1][c])\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  checkGameOver() {\n    if (this.isGameOver() === true) {\n      this.status = 'lose';\n      this.showMessage('Game Over!');\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  render() {\n    const cells = document.querySelectorAll('.field-cell');\n    let index = 0;\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        const cell = cells[index];\n        const value = this.board[r][c];\n\n        if (cell) {\n          cell.innerHTML = value || '';\n          cell.className = `field-cell ${value ? `field-cell--${value}` : ''}`;\n          index++;\n        }\n      }\n    }\n  }\n\n  showMessage(message) {\n    const messageElement = document.querySelector('.game-message');\n\n    if (messageElement) {\n      messageElement.textContent = message;\n      messageElement.style.display = 'block';\n    }\n  }\n\n  hideMessage() {\n    const messageElement = document.querySelector('.game-message');\n\n    if (messageElement) {\n      messageElement.style.display = 'none';\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","score","status","start","addRandomTile","render","button","document","querySelector","textContent","restart","hideMessage","scoreElement","moveLeft","totalPoints","boardChanged","r","newRow","points","changed","slideAndMerge","updateScore","checkGameOver","moveRight","reversedRow","reverse","moveUp","col","column","row","push","moveDown","transposeBoard","newBoard","length","emptCells","c","Math","floor","random","flat","includes","showMessage","filter","val","i","splice","join","isGameOver","getScore","getState","getStatus","cells","querySelectorAll","index","cell","value","innerHTML","className","message","messageElement","style","display","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageContainer","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$showMessage","messageType","classList","remove","add","addEventListener","confirm","ev","key"],"version":3,"file":"index.1f7b0764.js.map"}